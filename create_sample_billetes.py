"""
Script para agregar billetes de prueba con las nuevas caracter√≠sticas
"""

import sys
import os
sys.path.append('.')

from app.database import SessionLocal
from app.models.billetes import Billete, Caracteristica
from app.models.pais import Pais

def create_sample_billetes():
    """
    Crea billetes de muestra con las nuevas caracter√≠sticas
    """
    print("üéØ CREANDO BILLETES DE MUESTRA")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # 1. Verificar que hay pa√≠ses disponibles
        paises = db.query(Pais).all()
        if not paises:
            print("‚ùå No hay pa√≠ses en la base de datos")
            return False
        
        # 2. Obtener caracter√≠sticas
        caracteristicas = db.query(Caracteristica).all()
        if not caracteristicas:
            print("‚ùå No hay caracter√≠sticas en la base de datos")
            return False
        
        print(f"‚úÖ Encontrados {len(paises)} pa√≠ses y {len(caracteristicas)} caracter√≠sticas")
        
        # 3. Crear billetes de muestra
        billetes_muestra = [
            {
                "anverso": "billete_1_anverso.jpg",
                "reverso": "billete_1_reverso.jpg", 
                "pais": paises[0].id,
                "denominacion": "100 Pesos",
                "precio": "25.50",
                "banco_emisor": "Banco Central de la Rep√∫blica",
                "medidas": "156 x 66 mm",
                "descripcion_anverso": "Retrato de Jos√© Mart√≠ con elementos patri√≥ticos",
                "descripcion_reverso": "Paisaje nacional con flora t√≠pica",
                "pick": "P-125a",
                "estado": "Bueno",
                "vendido": False,
                "destacado": True,
                "caracteristicas_ids": [1, 3]  # Billete de Banco y Plancha
            },
            {
                "anverso": "billete_2_anverso.jpg",
                "reverso": "billete_2_reverso.jpg",
                "pais": paises[0].id if len(paises) > 0 else 1,
                "denominacion": "50 D√≥lares",
                "precio": "45.00",
                "banco_emisor": "Federal Reserve Bank",
                "medidas": "156 x 66 mm",
                "descripcion_anverso": "Benjamin Franklin con Independence Hall",
                "descripcion_reverso": "Independence Hall en Philadelphia",
                "pick": "P-540",
                "estado": "Excelente",
                "vendido": False,
                "destacado": True,
                "caracteristicas_ids": [2, 7]  # Sin Circular y Pol√≠mero
            },
            {
                "anverso": "billete_3_anverso.jpg",
                "reverso": "billete_3_reverso.jpg",
                "pais": paises[min(1, len(paises)-1)].id,
                "denominacion": "20 Euros",
                "precio": "15.75",
                "banco_emisor": "Banco Central Europeo",
                "medidas": "133 x 72 mm",
                "descripcion_anverso": "Arquitectura g√≥tica europea",
                "descripcion_reverso": "Puente g√≥tico con mapa de Europa",
                "pick": "P-21u",
                "estado": "Bueno",
                "vendido": True,
                "destacado": False,
                "caracteristicas_ids": [1, 8]  # Billete de Banco y Papel
            }
        ]
        
        for i, billete_data in enumerate(billetes_muestra, 1):
            print(f"\nüìã Creando billete {i}...")
            
            # Extraer IDs de caracter√≠sticas
            caracteristicas_ids = billete_data.pop('caracteristicas_ids', [])
            
            # Crear el billete
            billete = Billete(**billete_data)
            
            # Agregar caracter√≠sticas
            if caracteristicas_ids:
                caracteristicas_obj = db.query(Caracteristica).filter(
                    Caracteristica.id.in_(caracteristicas_ids)
                ).all()
                billete.caracteristicas = caracteristicas_obj
            
            db.add(billete)
            db.commit()
            db.refresh(billete)
            
            print(f"   ‚úÖ Billete '{billete.denominacion}' creado (ID: {billete.id})")
            print(f"   - Banco: {billete.banco_emisor}")
            print(f"   - Pick: {billete.pick}")
            print(f"   - Estado: {billete.estado}")
            print(f"   - Caracter√≠sticas: {len(billete.caracteristicas)}")
        
        # 4. Verificar resultados
        total_billetes = db.query(Billete).count()
        billetes_destacados = db.query(Billete).filter(Billete.destacado == True).count()
        billetes_vendidos = db.query(Billete).filter(Billete.vendido == True).count()
        
        print(f"\nüìä RESUMEN:")
        print(f"‚úÖ Total de billetes en BD: {total_billetes}")
        print(f"‚úÖ Billetes destacados: {billetes_destacados}")
        print(f"‚úÖ Billetes vendidos: {billetes_vendidos}")
        
    except Exception as e:
        print(f"‚ùå Error creando billetes de muestra: {e}")
        db.rollback()
        return False
    finally:
        db.close()
    
    print(f"\n‚úÖ ¬°Billetes de muestra creados exitosamente!")
    return True

if __name__ == "__main__":
    success = create_sample_billetes()
    if not success:
        sys.exit(1)